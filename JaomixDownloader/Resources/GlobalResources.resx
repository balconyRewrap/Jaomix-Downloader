<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="authorName" xml:space="preserve">
    <value>Enter Author's Name</value>
  </data>
  <data name="bookFileNameEPUB" xml:space="preserve">
    <value>Enter the name of the .epub file, for example text.epub
!PLEASE, USE ONLY ENGLISH SYMBOLS IN NAME!</value>
  </data>
  <data name="bookFileNameNoExtensions" xml:space="preserve">
    <value>Enter the name of the file (without .txt) where the book will be written
!PLEASE, USE ONLY ENGLISH SYMBOLS IN NAME!</value>
  </data>
  <data name="bookFileNameTXT" xml:space="preserve">
    <value>Enter the name of the .txt file, for example text.txt
!PLEASE, USE ONLY ENGLISH SYMBOLS IN NAME!</value>
  </data>
  <data name="bookName" xml:space="preserve">
    <value>Enter Book Title</value>
  </data>
  <data name="bookTxtMakeSuccess" xml:space="preserve">
    <value>Book .txt file created successfully</value>
  </data>
  <data name="bookUrl" xml:space="preserve">
    <value>Enter the url of the book's webpage</value>
  </data>
  <data name="choicerInitHeader" xml:space="preserve">
    <value>Choose the function you need:
Enter 1, if you need a Fast Chapter Downloader
Enter 2, if you need a Links Parser
Enter 3, if you need a Slow Chapter Fownloader
Enter 4, if you need a Txt to Epub Converter
Enter 5, if you need a Book Maker
Enter 6, if you need to change The Active Folder of the Program
Enter 7, if you need to change Language
Enter 8, if you need to change Operating System Choice
Enter 0, if you need to close Program
</value>
  </data>
  <data name="configActiveFolderWindows" xml:space="preserve">
    <value>Enter the path for the active folder (it will contain all files), for example C:\folder\
!PLEASE, USE ONLY ENGLISH SYMBOLS IN PATH!</value>
  </data>
  <data name="delTempFiles" xml:space="preserve">
    <value>Should the program save the .txt files of each chapter?
Press ENTER, if shouldn't save
Enter 1, if should save</value>
  </data>
  <data name="finalFileExtension" xml:space="preserve">
    <value>What output file is required?
Press ENTER if .epub is needed
Enter 1, if .txt is needed</value>
  </data>
  <data name="langGiverHead" xml:space="preserve">
    <value>Выберите язык программы
Choose the language of the program
Выберите 1, если необходим русский
Enter 2, if english is needed</value>
  </data>
  <data name="linksFileName" xml:space="preserve">
    <value>Enter the name of the file (with .txt) with links.
It must be in the active folder of the program.</value>
  </data>
  <data name="linksFileNameNew" xml:space="preserve">
    <value>Enter a name (with .txt) for the file where the links will be saved.
The file will be saved to the active folder of the program.
!PLEASE, USE ONLY ENGLISH SYMBOLS IN NAME!</value>
  </data>
  <data name="paragraphGetError" xml:space="preserve">
    <value>Attempt to get the paragraph at the given url got nothing. Perhaps there are problems with the site or there is no connection. I try again. If this message appears too often, close the program</value>
  </data>
  <data name="chapterFileRemoveFailure" xml:space="preserve">
    <value>chapter hasn't been deleted on this path:</value>
  </data>
  <data name="chapterLinksNumber" xml:space="preserve">
    <value>Number of links to chapters - </value>
  </data>
  <data name="parseLinksAgain" xml:space="preserve">
    <value>Need to search for links again?
Press ENTER, if not needed
Enter 1, if needed</value>
  </data>
  <data name="configActiveFolderLinux" xml:space="preserve">
    <value>Enter the path for the active folder (it will contain all files), for example /home/user/folder/
!PLEASE, USE ONLY ENGLISH SYMBOLS IN PATH!</value>
  </data>
  <data name="OSGiverHead" xml:space="preserve">
    <value>Operating System:
Press ENTER if Windows
Enter 1, if Linux</value>
  </data>
</root>